// GET: CompanyInfo/Create
		[CustomAuthorize(Roles = "Admin")]
		public ActionResult Create()
		{
			return View();
		}

		// POST: CompanyInfo/Create
		// To protect from overposting attacks, please enable the specific properties you want to bind to, for
		// more details see http://go.microsoft.com/fwlink/?LinkId=317598.
		[HttpPost]
		[CustomAuthorize(Roles = "Admin")]
		[ValidateAntiForgeryToken]
		public async Task<ActionResult> Create([Bind(Include = "CompanyName,CompanyLink,Address,City,State,ZipCode,Latitude,Longitude,CareerPage,CompanyType,IndustryServed,LanguagesUsed,Files")] Company company, HttpPostedFileBase upload)
		{
			var _company = db.Companies.Find(company.CompanyName);
			if (_company != null)
			{
				ViewBag.ErrorMessage = company.CompanyName + " already exists.";
			}
			else if (ModelState.IsValid)
			{
				if (upload != null && upload.ContentLength > 0)
				{
					var logo = new CompanyFile
					{
						FileName = System.IO.Path.GetFileName(upload.FileName),
						FileType = FileType.Logo,
						ContentType = upload.ContentType,
						CompanyName = company.CompanyName
					};
					using (var reader = new System.IO.BinaryReader(upload.InputStream))
					{
						logo.Content = reader.ReadBytes(upload.ContentLength);
					}
					company.Files = new List<CompanyFile> { logo };
				}
				db.Companies.Add(company);
				await db.SaveChangesAsync();
				return RedirectToAction("Details", new { id = company.CompanyName });
			}

			return View(company);
		}

		//GET: Jobs/Edit/5
		[CustomAuthorize(Roles = "Admin")]
		public ActionResult Edit(string id)
		{
			var company = new Company();
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
			company = db.Companies.Include(c => c.Files).SingleOrDefault(c => c.CompanyName == id);
			if (company == null)
			{
				return HttpNotFound();
			}
			return View(company);
		}

		// POST: Jobs/Edit/5
		[HttpPost]
		[CustomAuthorize(Roles = "Admin")]
		[ValidateAntiForgeryToken]
		public ActionResult Edit(string id, HttpPostedFileBase upload)
		{
			if (id == null)
			{
				return HttpNotFound();
			}
			var companyToUpdate = db.Companies.Find(id);
			try
			{
				if (upload != null && upload.ContentLength > 0)
				{
					var oldLogo = companyToUpdate.Files.Any(f => f.FileType == FileType.Logo);
					if (oldLogo == true)
					{
						db.CompanyFiles.Remove(companyToUpdate.Files.First(f => f.FileType == FileType.Logo));
					}
					var logo = new CompanyFile
					{
						FileName = System.IO.Path.GetFileName(upload.FileName),
						FileType = FileType.Logo,
						ContentType = upload.ContentType,
						CompanyName = companyToUpdate.CompanyName
					};
					using (var reader = new System.IO.BinaryReader(upload.InputStream))
					{
						logo.Content = reader.ReadBytes(upload.ContentLength);
					}
					companyToUpdate.Files = new List<CompanyFile> { logo };
				}
				if (ModelState.IsValid && TryUpdateModel(companyToUpdate, new string[] { "CompanyName", "CompanyLink", "Address", "City", "State", "ZipCode", "Latitude", "Longitude", "CareerPage", "CompanyType", "IndustryServed", "LanguagesUsed", "Files" }))
				{
					try
					{
						db.SaveChanges();
						return RedirectToAction("Details", new { id = companyToUpdate.CompanyName });
					}
					catch (DataException /*ex*/)
					{
						ModelState.AddModelError("", "Unable to save changes.");
					}
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}

			return View(companyToUpdate);
		}
